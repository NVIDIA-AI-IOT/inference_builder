# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.

from typing import Any
{{imports}}
from contextlib import asynccontextmanager
from fastapi import Request, HTTPException
from nimlib.nim_inference_api_builder.http_api import HttpNIMApiInterface
from .responder import Responder
from lib.utils import get_logger

class Interface(HttpNIMApiInterface):

    def __init__(self, *args, **kwargs):
        super().__init__(
            # These kwargs will get propagated to the FastAPI class constructor
            *args,
            description = "{{ info.description }}",
            title = "{{ info.title }}",
            version = "{{ info.version }}",
            **kwargs
        )
        self.responder = Responder()
        self.logger = get_logger(__name__)

    {% for operation in operations %}
    @HttpNIMApiInterface.route("{{operation.path}}", methods=["{{operation.type}}"])
    async def {{operation.function_name}}(self, request: Request, {{operation.snake_case_arguments}}) -> {{operation.response}}:
        self.logger.info("{{operation.function_name}} called")
        status, response = await self.responder.take_action("{{operation.function_name}}", *locals().values())
        if status != 200:
            raise HTTPException(status_code=status, detail=response)
        self.logger.debug(f"response generated as {response}")
        return response
    {% endfor %}

    async def health_live(self):
        """
        Provide your implementation of liveness to know when to restart container
        """
        return await super().health_live()

    async def health_ready(self):
        """
        Provide your implementation of readiness to know when container ready to accept traffic
        """
        return await super().health_ready()

    @asynccontextmanager
    async def lifespan(self):
        self.logger.info("Welcome! Application is starting up.")
        try:
            yield
        finally:
            self.logger.info("Thank you for using the application. Shutting down.")

def get_openapi_schema(file_dump=True, pprint=True):
    """
    Utility function to get API schema in YAML format.
    This is used after inference.py has been completed with custom user APIs.
    """
    import yaml
    interface_instance = Interface()
    schema: dict = interface_instance.get_openapi_schema()
    if pprint:
        print(yaml.dump(schema, sort_keys=False))
    if file_dump:
        with open("api_spec.yaml", "w+") as file:
            yaml.dump(schema, file, sort_keys=False)


def main():
    interface = Interface()
    interface.serve()
