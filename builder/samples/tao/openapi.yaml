openapi: 3.1.0
info:
  title: NVIDIA METROPOLIS INFERENCE SERVICE
  description: NVIDIA METROPOLIS INFERENCE SERVICE
  version: "1.0.0"
  termsOfService: https://nvidia.com/legal/terms-of-use
  contact:
    name: NVIDIA Support
    url: https://help.nvidia.com/
  license:
    name: NVIDIA AI Foundation Models Community License
    url: https://docs.nvidia.com/ai-foundation-models-community-license.pdf
paths:
  /v1/files:
    post:
      tags:
        - Files
      summary: Upload a media file that can be used as inference input.
      description: Upload media files to be used as inference input. Currently, only images upto 50 MB are supported.
      operationId: add_media_file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddFileRequest'
      responses:
        "200":
          description: Successful Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFileResponse'
        "500":
          description: The invocation ended with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    get:
      tags:
        - Files
      summary: Returns a list of the uploaded files.
      description: Returns a list that includes ID, file name, size, purpose, file size, and media type for the uploaded files.
      operationId: list_media_files
      responses:
        "200":
          description: Successful Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
        "500":
          description: The invocation ended with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v1/files/{file_id}:
    delete:
      tags:
        - Files
      summary: Delete a uploaded file.
      description: Deletes an uploaded file based on ID.
      operationId: delete_media_file
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
            maxLength: 36
            pattern: '[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?4[0-9a-fA-F]{3}-?[89abAB][0-9a-fA-F]{3}-?[0-9a-fA-F]{12}'
            description: File having 'file_id' to be deleted.
            title: File Id
          description: File having 'file_id' to be deleted.
      responses:
        "200":
          description: Successful Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileResponse'
        "500":
          description: The invocation ended with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v1/inference:
    post:
      tags:
        - "NVIDIA METROPOLIS INFERENCE API"
      summary: Get the inference result for the provided image input
      description: "Invokes inference for the input images.
        The input image can be Base64 encoded string in the request or it can be
        specified using the file identifier of an uploaded file. "
      operationId: inference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceRequest'
        required: true
      responses:
        "200":
          description: Invocation is fulfilled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceResponse'
        "500":
          description: The invocation ended with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
security:
  - Token: []

components:
  securitySchemes:
    Token:
      type: http
      scheme: bearer
  schemas:
    MediaAsset:
      properties:
        id:
          type: string
          maxLength: 36
          pattern: '[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?4[0-9a-fA-F]{3}-?[89abAB][0-9a-fA-F]{3}-?[0-9a-fA-F]{12}'
          title: Id
          description: The file identifier (asset_id),                     which can be referenced in the API endpoints.
        path:
          type: string
          maxLength: 256
          pattern: ^([a-zA-Z][a-zA-Z0-9+.-]*:?//?)?[A-Za-z0-9_.\-/]*$
          title: Filename
          description: Local path of the file or URI with optional protocol.
          examples:
            - myfile.jpg
            - /tmp/assets/name.jpg
            - file:///tmp/myfile.jpg
            - rtsp://camera.example.com/stream
            - udp://192.168.1.100:5000
            - rtsp:camera.example.com/stream
            - udp:192.168.1.100:5000
        size:
          type: integer
          format: int64
          title: Size
          description: Size of the file in bytes.
        contentType:
          type: string
          title: Content Type
          description: MIME type of the file.
          examples:
            - image/jpeg
      additionalProperties: false
      type: object
      required:
        - id
        - path
        - size
        - contentType
      title: MediaAsset
      description: Represents a media asset.
    AddFileResponse:
      properties:
        data:
          $ref: '#/components/schemas/MediaAsset'
      additionalProperties: false
      type: object
      required:
        - data
      title: AddFileResponse
      description: Response schema for the add file request.
    AddFileRequest:
      properties:
        file:
          type: string
          maxLength: 52428800
          format: binary
          title: File
          description: File object (not file name) to be uploaded.
      type: object
      required:
        - file
      title: AddFileRequest
      description: Schema for uploading media files.
    ListFilesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/MediaAsset'
          type: array
          maxItems: 100000000000000000
          title: Data
      additionalProperties: false
      type: object
      required:
        - data
      title: ListFilesResponse
      description: Response schema for the list files API.
    DeleteFileResponse:
      properties:
        deleted:
          type: boolean
          title: Deleted
          description: Indicates if the file was deleted
      additionalProperties: false
      type: object
      required:
        - deleted
      title: DeleteFileResponse
    InferenceRequest:
      additionalProperties: false
      properties:
        input:
          oneOf:
          - type: string
            title: string
            maxLength: 4294967296
            pattern: ^.*$
          - $ref: '#/components/schemas/MediaAsset'
          - type: array
            items:
              oneOf:
                - type: string
                  pattern: ^.*$
                  maxLength: 4294967296
                - $ref: '#/components/schemas/MediaAsset'
            maxItems: 64
          title: Input
          description: 'The list of images on which you want to perform inference. Images should be in form
          of `data:image/{format};base64,{base64encodedimage}`.Accepted formats are `jpg`, `png` and `jpeg`. Or they
          can be uploaded media assets.'
        text:
          type: array
          items:
            type: array
            items:
              type: string
              maxLength: 256
            maxItems: 10
          title: Text
          description: 'A 2D array of text to be used for the extra prompt on the inference.'
        model:
          type: string
          enum: [nvidia/nvdino-v2, nvidia/c-radio-p3-v3, nvidia/convnext]
          title: Model
          description: ID of the CV model.
          example: nvidia/nvdino-v2
      type: object
      required:
        - input
        - model
      title: InferenceRequest
      description: List of input images for the inference request.
    InferenceResponse:
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/InferenceResult'
          type: array
          title: Data
          description: The list of inference data generated by the model.
          maxItems: 10
        model:
          type: string
          description: Model used to generate masks.
          example: nvidia/nvdino
          title: Model
        usage:
          $ref: '#/components/schemas/Usage'
          description: Usage statistics for the masks request.
          examples:
          - num_images: 1
      additionalProperties: false
      required:
        - data
        - usage
        - model
      title: InferenceResponse
      description: Response schema for the inference request.
    InferenceResult:
      type: object
      description: Represents detected bounding boxes
      properties:
        index:
          type: integer
          format: int32
          title: Index
          description: The index of the mask in the list of masks.
          minimum: 0
          maximum: 127
        shape:
          type: array
          description: The dimension for understanding the output
          items:
            type: integer
          title: Output Dimensions
          maxItems: 3
        bboxes:
          type: array
          description: The bboxes gives a list of bboxes
          items:
            type: array
            description: |
              bbox format [x1, y1, x2, y2] relative to network input dimension.
              x1, y1 is the top-left corner, x2, y2 is the bottom-right corner.
            items:
              type: number
              format: integer
            maxItems: 4
            minItems: 4
          maxItems: 512
          title: Bounding Boxes
        probs:
          type: array
          description: The probs gives a list of probabilities
          items:
            type: number
            format: float
          maxItems: 512
          title: Probabilities
        labels:
          type: array
          description: The labels of each bounding box
          items:
            type: array
            items:
              type: string
            maxItems: 10
          maxItems: 512
          title: Labels
        masks:
          oneOf:
            - type: array
              description: |
                The mask as a list of bytes, The dimension of the vector depends on the model.
              items:
                type: array
                items:
                  type: integer
                  format: uint8
                maxItems: 522240 # 544 * 960
              maxItems: 512
              # maxItems: 262144 # 512 x 512
            - type: string
              maxLength: 10240
              description: |
                The mask vector as base64 string. The length of the vector depends on the model.
              format: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$
          title: Mask
      required:
        - index
        - mask
      title: SegmentationResult
    Usage:
      properties:
        num_images:
          type: integer
          format: int32
          title: Num Images
          minimum: 0
          maximum: 64
          description: Number of images processed.
      additionalProperties: false
      required:
        - num_images
      title: Usage
    Errors:
      type: object
      properties:
        type:
          type: string
          maxLength: 128
          description: Error type
        title:
          type: string
          maxLength: 128
          description: Error title
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 999
          description: Error status code
        detail:
          type: string
          maxLength: 1024
          description: Detailed information about the error
        instance:
          type: string
          maxLength: 256
          description: Function instance used to invoke the request
      required:
        - type
        - title
        - status
        - detail
        - instance
      title: Errors
