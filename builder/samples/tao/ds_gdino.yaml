name: "tao"
model_repo: /workspace/.cache/model-repo/

input:
- name: image
  data_type: TYPE_CUSTOM_BINARY_BASE64
  dims: [ -1 ]
  optional: true
- name: media_url
  data_type: TYPE_CUSTOM_BINARY_URLS
  dims: [ -1 ]
  optional: true
- name: mime
  data_type: TYPE_STRING
  dims: [ -1 ]
  optional: false
- name: text
  data_type: TYPE_STRING
  dims: [ -1, -1 ]
  optional: true

output:
  - name: output
    data_type: TYPE_CUSTOM_DS_METADATA
    dims: [ -1 ]

server:
  responders:
    infer:
      operation: inference
      requests:
        InferenceRequest: >
          {
            {% set input_items = request.input %}
            {% if input_items|length > 0 %}
              {% if input_items[0] is string %}
                "image": [
                  {% for item in input_items %}
                      {{ item|replace('data:image\/[a-zA-Z0-9.+-]+;base64,', '')|tojson }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ],
                "mime": [
                  {% for item in input_items %}
                    {{ item|extract('data:([\w+/]+);base64,')|tojson }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ],
              {% elif input_items[0] is mapping %}
                "media_url": [
                  {% for item in input_items %}
                    {{ item.path|tojson }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ],
                "mime": [
                  {% for item in input_items %}
                    {{ item.contentType|tojson }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ],
              {% endif %}
                "text": [
                  {% for item in request.text %}
                    {{ item|tojson }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ]
            {% endif %}
          }
      responses:
        InferenceResponse: >
          {
            "data": [
              {% for item in response.output %} {
                "index": {{loop.index0}},
                "shape": {{item.shape}},
                "bboxes": {{item.bboxes}},
                "probs": {{item.probs}},
                "labels": {{item.labels|tojson}},
                "masks": {{item.mask}}
              } {% if not loop.last %}, {% endif %} {% endfor %} ],
            "usage": { "num_images": 1},
            "model": "nvidia/nvdinov2"
          }
    add_file:
      operation: add_media_file
      responses:
        AddFileResponse: >
          {
            "data": {
              "id": {{response.id|tojson}},
              "path": {{response.path|tojson}},
              "size": {{response.size|tojson}},
              "duration": {{response.duration|tojson}},
              "contentType": {{response.mime_type|tojson}}
            }
          }
    del_file:
      operation: delete_media_file
      responses:
        DeleteFileResponse: >
          {
            "deleted": {{response.status|tojson}}
          }
    list_files:
      operation: list_media_files
      responses:
        ListFilesResponse: >
          {
            "data": [
              {% for item in response.assets %} {
                "id": {{item.id|tojson}},
                "path": {{item.path|tojson}},
                "size": {{item.size|tojson}},
                "contentType": {{item.mime_type|tojson}}
              } {% if not loop.last %}, {% endif %} {% endfor %}
            ]
          }
models:
- name: tao
  backend: deepstream/nvinfer
  max_batch_size: 1
  input:
  - name: image
    data_type: TYPE_CUSTOM_DS_IMAGE
    dims: [-1, -1, 3]
  - name: media_url
    data_type: TYPE_CUSTOM_BINARY_URLS
    dims: [ -1 ]
  - name: mime
    data_type: TYPE_CUSTOM_DS_MIME
    dims: [ -1 ]
  - name: input_ids
    data_type: TYPE_INT64
    dims: [ 256 ]
  - name: attention_mask
    data_type: TYPE_BOOL
    dims: [ 256 ]
  - name: position_ids
    data_type: TYPE_INT64
    dims: [ 256 ]
  - name: token_type_ids
    data_type: TYPE_INT64
    dims: [ 256 ]
  - name: text_token_mask
    data_type: TYPE_BOOL
    dims: [ 256, 256 ]
  output:
  - name: pred_logits
    data_type: TYPE_FP32
    dims: [ -1, -1 ]
  - name: pred_boxes
    data_type: TYPE_FP32
    dims: [ -1, 4 ]
  - name: pred_masks
    data_type: TYPE_FP32
    dims: [ -1, -1, -1, -1 ]
  parameters:
    # timeout in nanoseconds for batching multiple inputs
    # batch_timeout: 33000000
    infer_config_path:
      - nvdsinfer_config.yaml
    preprocess_config_path:
      - nvdspreprocess_config.yaml
  preprocessors:
    - kind: "custom"
      name: "gdino-tokenizer"
      input: ["text"]
      output: ["input_ids", "attention_mask", "position_ids", "token_type_ids", "text_token_mask", "pos_map"]
  postprocessors:
    - kind: "custom"
      name: "gdino-postprocessor"
      input: ["pred_logits", "pred_boxes", "pred_masks", "pos_map"]
      output: ["output"]
      config:
        infer_config_path: nvdsinfer_config.yaml  # relative path to model_home


