# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


specVersion: 2.0.0

version: 0.0.1

name: tao-cv-validator-test

description: Developer tests for tao-cv-validator service

dependencies:
- ucf.svc.tao-cv-validator:0.0.1

components:
- name: tao-cv-validator
  type: ucf.svc.tao-cv-validator
  parameters:
    timeToSleep: 1200000
    podAnnotations:
      test-app-pod-annotation: annotation-value
    podLabels:
      test-app-pod-label: label-value
    svcAnnotations:
      test-app-svc-annotation: annotation-value
    svcLabels:
      test-app-svc-label: label-value
  secrets:
    some-secret-name: some-secret
  files:
    some-config.yaml: config.yaml
    # In case file is larger than 1MiB, it must be mounted from a volume.
    # It will be upto the user to do this. User can use `__FROM_VOLUME__`
    # keyword to indicate to tools about this and tools will not try to
    # mount a file or perform any validations
    # some-config.yaml: __FROM_VOLUME__

- name: some-external-endpoint
  type: ucf.svc.external-endpoint
  parameters:
    service: localhost
    port: 8080

connections:
  tao-cv-validator/tao-cv-validator-endpoint-name: some-external-endpoint/endpoint

vaultAgent:
  auth:
    path: auth/jwt/authMountPath
    type: jwt
    jwt:
      audience: https://vault-service:443
      role: auth-role
  role: auth-role
  namespace: vault-namespace
  service: https://vault-service/

# certficates:
#   devCerts:
#     file: certificates.yaml
#     addToHelmChart: false

secrets:
  some-secret:
    vaultAgent:
      path: secret/mount/path
      template:
        type: kv
        key: KEY_IN_SECRET

  # some-secret:
  #   k8sSecret:
  #     secretName: <k8sSecretName>
  #     key: <keyInK8sSecret>

  # some-secret:
  #   secretsStoreCsi:
  #     providerClassName: <providerClassName>
  #     objectName: <objectName>

  # some-secret:
  #   certificate:
  #     certName: <certificateName>
  #     type: <certificate/privateKey/issuingCA>
